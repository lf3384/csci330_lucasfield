Git Commands Quick Reference - CSCI 330

Essential Daily Commands

Check Status
git status                  # See current branch and file changes
git branch                  # List all branches (* = current)
git log --oneline -5        # Show recent commits

Start New Assignment
git checkout main           # Switch to main branch
git pull upstream main      # Get latest course updates
git push origin main        # Update your fork
git checkout -b week##-assignment-name  # Create feature branch

Work on Assignment
git add .                   # Stage all changes
git add specific_file.cpp   # Stage specific file
git commit -m "Clear description"  # Commit changes
git push origin branch-name # Push to your fork

Initial Setup Commands (One Time Only)

Fork Setup
# After forking on GitHub, clone your fork:
git clone https://github.com/YOUR_USERNAME/csci330_f25.git
cd csci330_f25
git remote add upstream https://github.com/DEmcla/csci330_f25.git

Configure Identity
git config user.name "FirstName LastName - CSCI330"
git config user.email "your.email@university.edu"

Create Assignment Directory
mkdir -p csci330_f25/assignments/CSCI330_FirstName_LastName

Branch Management

Creating Branches
git checkout -b new-branch-name     # Create and switch to new branch
git checkout existing-branch        # Switch to existing branch
git branch                          # List all branches

Naming Conventions
git checkout -b week01-pointers-basics
git checkout -b week02-dynamic-memory  
git checkout -b week03-classes-intro

Cleaning Up Branches
git branch -d branch-name              # Delete local branch
git push origin --delete branch-name  # Delete remote branch

Synchronization Commands

Keep Fork Updated
# Run this before starting each assignment:
git checkout main
git pull upstream main
git push origin main

Update Feature Branch
# If main has new changes while you're working:
git checkout main
git pull upstream main
git checkout your-feature-branch
git merge main

Commit Best Practices

Good Commit Messages
git commit -m "Implement pointer arithmetic functions

- Add pointer_add() with bounds checking
- Add pointer_subtract() with validation  
- Include comprehensive test cases"

Commit Frequently
git add .
git commit -m "Add basic function structure"
git commit -m "Implement error handling"
git commit -m "Add unit tests"
git commit -m "Update documentation"

Pull Request Commands

Submit for Review
# After final commit:
git push origin your-branch-name
# Then create PR on GitHub

Address PR Feedback
# Make requested changes, then:
git add .
git commit -m "Address PR feedback: fix memory leak"
git push origin your-branch-name
# PR updates automatically

Troubleshooting Commands

See What Changed
git diff                    # Show unstaged changes
git diff --staged          # Show staged changes  
git diff HEAD~1            # Compare with previous commit

Undo Changes
git checkout -- file.cpp   # Discard unstaged changes to file
git reset HEAD file.cpp     # Unstage file (keep changes)
git reset --hard HEAD       # Discard ALL unstaged changes (WARNING: dangerous)

Fix Last Commit
git commit --amend -m "Better commit message"  # Fix commit message
git add forgotten_file.cpp
git commit --amend --no-edit                   # Add file to last commit

Resolve Merge Conflicts
git status                  # See conflicted files
# Edit files (look for <<<< ==== >>>>)
git add .                   # Mark conflicts as resolved
git commit -m "Resolve merge conflicts"

Information Commands

Repository Status
git remote -v               # Show all remotes
git log --graph --oneline   # Visual commit history
git show                    # Show latest commit details

File History
git log -- file.cpp         # Show commits affecting specific file
git blame file.cpp          # Show who changed each line

Emergency Commands

Accidentally on Main Branch
# If you made changes on main instead of feature branch:
git checkout -b week01-assignment-name  # Create branch with current changes
# Now you're on the correct branch!

Lost Changes
git reflog                  # Show recent actions
git checkout HEAD@{2}       # Go back to specific state

Need to Start Over
git checkout main
git pull upstream main
git checkout -b week01-assignment-name-v2
# Copy your work manually if needed

Common Error Solutions

"Branch already exists"
git checkout existing-branch-name     # Switch to it instead
# OR delete it first:
git branch -d old-branch-name
git checkout -b week01-assignment-name

"Nothing to commit"
git status                  # Check if files are staged
git add .                   # Stage files if needed

"Merge conflict"
1. git status shows conflicted files
2. Open files and look for <<<<, ====, >>>> markers
3. Edit to resolve conflicts
4. git add . and git commit -m "Resolve conflicts"

"Permission denied"
- Check if you're pushing to your fork (origin), not upstream
- Verify GitHub credentials/tokens are set up

Workflow Checklist

Before Each Assignment:
- git checkout main
- git pull upstream main 
- git push origin main
- git checkout -b week##-assignment-name

During Assignment:
- Work in your assignment directory
- git add . and git commit -m "..." frequently
- git push origin branch-name regularly

Submitting Assignment:
- Final git push origin branch-name
- Create Pull Request on GitHub
- Fill out PR template completely
- Wait for review and address feedback

After PR Merged:
- git checkout main
- git pull upstream main
- git branch -d old-branch-name

Pro Tips:
- Use git status frequently to stay oriented
- Commit early and often - you can always squash later  
- Read error messages carefully - they usually tell you exactly what to do
- When in doubt, ask for help rather than forcing commands
- Keep this reference handy until commands become muscle memory!