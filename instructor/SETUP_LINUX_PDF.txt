LINUX SETUP GUIDE - CSCI 330
=============================

Total Time: 10-20 minutes
Read only this guide - Windows and Mac users have their own

=============================
BEFORE YOU START
=============================

You'll need:
• Any Linux distribution (Ubuntu, Fedora, Arch, etc.)
• Sudo access (admin privileges)
• Stable internet connection
• Your GitHub account

What we're installing:
1. Docker (container platform)
2. VSCode (code editor)
3. Build tools (if not already installed)

Lucky you! Linux setup is the easiest since you're already using a developer OS.

=============================
STEP 1: INSTALL DOCKER (5 minutes)
=============================

What it does: Creates consistent C++ environment for everyone

UBUNTU/DEBIAN USERS (most common):
Copy and paste this entire block in terminal:

sudo apt update
sudo apt install docker.io docker-compose build-essential cmake git curl
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER

FEDORA/RHEL USERS:

sudo dnf install docker docker-compose gcc-c++ cmake git
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER

ARCH/MANJARO USERS:

sudo pacman -S docker docker-compose base-devel cmake git
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER

FOR ALL DISTRIBUTIONS:
IMPORTANT: After running your commands above, type:

newgrp docker

(This lets you use Docker without sudo)

VERIFY IT WORKED:

docker --version

SUCCESS LOOKS LIKE: "Docker version 20.x.x" (any number is fine)

IF SOMETHING WENT WRONG:
- "Permission denied" when running docker:
  sudo usermod -aG docker $USER
  newgrp docker
- "Cannot connect to Docker daemon":
  sudo systemctl start docker
  sudo systemctl enable docker
- Package names don't work: Different distributions use different names

=============================
STEP 2: INSTALL VSCODE (3 minutes)
=============================

What it does: Your code editor that connects to Docker

OPTION A: USING SNAP (works everywhere):

sudo snap install code --classic

OPTION B: DIRECT DOWNLOAD:
1. Go to: https://code.visualstudio.com
2. Click "Download for Linux"
3. Choose your package type:
   • Ubuntu/Debian: Download .deb file
   • Fedora/RHEL: Download .rpm file

4. Install it:
   For .deb files:
   sudo dpkg -i code*.deb
   
   For .rpm files:
   sudo rpm -i code*.rpm

ADD EXTENSIONS:
1. Start VSCode:
   code

2. Install extensions (press Ctrl+Shift+X):
   Search and install these:
   • C/C++ Extension Pack (by Microsoft)
   • Dev Containers (by Microsoft)
   • Docker (by Microsoft)

3. Verify it worked:
   code --version

SUCCESS LOOKS LIKE: Shows version number

=============================
STEP 3: GET COURSE FILES (3 minutes)
=============================

What it does: Downloads course materials to your computer

DO THIS:

1. Set up Git (use YOUR actual name and email):
   
   git config --global user.name "Your Actual Name"
   
   git config --global user.email "your.email@university.edu"

2. Fork the course repository
   - Go to: https://github.com/INSTRUCTOR_USERNAME/cpp
   - Click "Fork" button (top right)
   - Wait for it to copy
   - You now have your own copy!

3. Download your fork
   Copy/paste these lines one at a time:
   
   Go to Desktop:
   cd ~/Desktop
   
   Clone (replace YOUR_USERNAME with your GitHub username):
   git clone https://github.com/YOUR_USERNAME/cpp.git
   
   Enter the folder:
   cd cpp

4. Connect to course updates:
   
   git remote add upstream https://github.com/INSTRUCTOR_USERNAME/cpp.git

5. Verify it worked:
   
   git remote -v
   
   SUCCESS LOOKS LIKE: Shows 4 lines with "origin" and "upstream"

=============================
STEP 4: BUILD YOUR ENVIRONMENT (5 minutes)
=============================

What it does: Creates your C++ development container

DO THIS:

1. Make sure you're in the right place:
   
   cd ~/Desktop/cpp

2. Build the container (takes 3-5 minutes - be patient!):
   
   docker-compose build
   
   - You'll see lots of text scrolling - that's normal
   - Perfect time for a coffee break

3. Test it:
   
   docker run --rm cpp-course:latest g++ --version
   
   SUCCESS LOOKS LIKE: "g++ (GCC) 11.x.x"

IF SOMETHING WENT WRONG:
- "Permission denied":
  groups | grep docker
  If you don't see "docker":
  sudo usermod -aG docker $USER
  newgrp docker
- "docker-compose: command not found":
  Ubuntu/Debian: sudo apt install docker-compose
  Fedora: sudo dnf install docker-compose
- Build fails:
  sudo systemctl status docker
  If not running: sudo systemctl start docker

=============================
STEP 5: CONNECT VSCODE TO DOCKER (5 minutes)
=============================

What it does: Makes VSCode use your container automatically

DO THIS:

1. Open your project:
   
   cd ~/Desktop/cpp
   code .
   
   (The dot is important!)

2. Create config folder:
   In VSCode:
   - Look at left sidebar (file explorer)
   - Right-click in empty area
   - Click "New Folder"
   - Name it: .vscode (with the dot!)

3. Create config file:
   - Right-click the .vscode folder
   - Click "New File"
   - Name it: devcontainer.json
   - Copy and paste this EXACTLY:

{
  "name": "C++ Development",
  "dockerComposeFile": "../docker-compose.yml",
  "service": "cpp-dev",
  "workspaceFolder": "/workspace",
  "extensions": [
    "ms-vscode.cpptools-extension-pack"
  ]
}

   - Save with Ctrl+S

4. Start the container:
   - Press F1 (or Ctrl+Shift+P)
   - Type: reopen in container
   - Click "Dev Containers: Reopen in Container"
   - First time takes 2-3 minutes - be patient!

5. Test everything:
   When VSCode reloads:
   - Look at bottom left - should say "Dev Container: C++ Development"
   - Click Terminal → New Terminal (or press Ctrl+`)
   - In the terminal, type:
   
   g++ --version
   
   SUCCESS LOOKS LIKE: Terminal shows "g++ (GCC) 11.x.x"

6. Run your first program:
   In the VSCode terminal, copy/paste:
   
   echo '#include <iostream>
   int main() { std::cout << "Setup complete!\\n"; }' > test.cpp
   
   Then compile:
   g++ test.cpp -o test
   
   Then run:
   ./test
   
   SUCCESS LOOKS LIKE: "Setup complete!"

=============================
YOU'RE DONE!
=============================

DAILY ROUTINE (20 seconds):
1. Open terminal
2. Type: cd ~/Desktop/cpp && code .
3. Press F1 → type "reopen" → select "Reopen in Container"
4. Start coding!

QUICK REFERENCE:
• Write code: VSCode - Just type!
• Compile code: VSCode Terminal - g++ myfile.cpp -o myprogram
• Run program: VSCode Terminal - ./myprogram
• Save work: VSCode - Ctrl+S
• Submit homework: System Terminal - git add . then git commit -m "Done" then git push

WHICH TERMINAL DO I USE?
• System Terminal: Git commands, opening projects, Docker management
• VSCode Terminal: ALL C++ work (compiling, running)
• Easy way to remember: If VSCode is open, use its terminal

=============================
COMMON PROBLEMS & SOLUTIONS
=============================

"IT'S NOT WORKING!"

1. First, always try:
   sudo systemctl status docker
   If not running:
   sudo systemctl start docker

2. VSCode can't find container:
   - Delete the .vscode folder
   - Recreate it following Step 5

3. Permission denied errors:
   groups | grep docker
   If "docker" not shown:
   sudo usermod -aG docker $USER
   newgrp docker

4. Firewall blocking Docker:
   Ubuntu/Debian:
   sudo ufw allow from 172.17.0.0/16
   
   Fedora:
   sudo firewall-cmd --zone=trusted --add-interface=docker0

5. SELinux issues (Fedora/RHEL):
   sudo setenforce 0

6. Can't push to GitHub:
   - GitHub now requires tokens instead of passwords
   - Go to GitHub → Settings → Personal Access Tokens
   - Generate one and use it as your password

STILL STUCK?
- Take a screenshot of the error
- Note which step you're on
- Include your Linux distribution and version
- Ask in office hours or Discord/Forum

=============================
WHY LINUX USERS HAVE IT EASY
=============================

You picked the right OS for development! Here's why your setup was simpler:
• Docker runs natively (no virtualization layer)
• Package managers handle dependencies automatically
• Terminal is your friend, not your enemy
• Everything "just works" the way it's supposed to

=============================

Remember: This seems like a lot, but you only do it once! Daily use takes 20 seconds.